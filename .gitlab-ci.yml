stages:
  - build
  - test

# ========================================================================================================================
# build template job - build .net app and push docker images
# ========================================================================================================================
build:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  except:
    - master
  before_script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$REGISTRY\":{\"username\":\"$REGISTRY_USER\",\"password\":\"$REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo $CI_PROJECT_DIR
    - if [ -f $CI_PROJECT_DIR/nuget.config ]; then
      cp $CI_PROJECT_DIR/nuget.config $CI_PROJECT_DIR/${SRCDIR:-src}/${APPATH:-}${APPNAME}/;
      cp $CI_PROJECT_DIR/nuget.config $CI_PROJECT_DIR/${SRCDIR:-src}/;
      fi
    # - CI_IMAGE_TAG=6.0
  script:
    - if echo $CI_COMMIT_TAG | grep -Eq "$JIRA_FIX_VERSION_PREFIX" ; then
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKERFILE --destination $REGISTRY/$DEPLOY_IMAGE:$CI_IMAGE_TAG --destination $REGISTRY/$DEPLOY_IMAGE:${CI_IMAGE_TAG}${CI_PIPELINE_IID} --destination $REGISTRY/$DEPLOY_IMAGE:prod_$CI_IMAGE_TAG --build-arg APPNAME="$APPNAME" --build-arg APPATH="${APPATH:-}" --build-arg SRCDIR="${SRCDIR:-src}";
      else
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $DOCKERFILE --destination $REGISTRY/$DEPLOY_IMAGE:$CI_IMAGE_TAG --destination $REGISTRY/$DEPLOY_IMAGE:${CI_IMAGE_TAG}${CI_PIPELINE_IID} --build-arg APPNAME="$APPNAME" --build-arg APPATH="${APPATH:-}" --build-arg SRCDIR="${SRCDIR:-src}";
      fi
  tags:
    - build
  retry: 1

# .savejson:
#   stage: build
#   image: theharbor.xyz/docker-images/alpine-curl:latest
#   script:
#     - curl $SWAGGER_JSON_URL > $CI_PROJECT_DIR/swagger-dif/old-swager.json
#   except:
#     - master
#   tags:
#     - kuberkyc
#   retry: 1
#   artifacts:
#     paths:
#     - swagger-dif/*.json
#     expire_in: 1 days

# ========================================================================================================================
# sonarqube test job template - test app in sonarqube
# ========================================================================================================================

# .sonartest:
#   image: theharbor.xyz/docker-images/dotnet/sdk:6.0
#   stage: test
#   except:
#     - master
#   retry: 0
#   tags:
#     - kuberkyc
#   before_script:
#     - export ASPNETCORE_ENVIRONMENT="Development"
#     - mkdir $CI_PROJECT_DIR/coverage
#     - mkdir $CI_PROJECT_DIR/build
#     - echo "deb http://deb.debian.org/debian stretch-backports main" >> /etc/apt/sources.list
#     - cat /etc/apt/sources.list
#     - mkdir -p /usr/share/man/man1
#     - apt-get update
#     - apt-get -t stretch-backports install openjdk-11-jre-headless -y --no-install-recommends
#     - export PATH="$PATH:/usr/bin:/root/.dotnet/tools"
#     - dotnet tool install --global dotnet-sonarscanner
#     # - CI_IMAGE_TAG=6.0
#   script:
#     - cd $CI_PROJECT_DIR/
#     - dotnet new tool-manifest
#     - dotnet tool install --global coverlet.console
#     - dotnet restore
#     - ls -lah $CI_PROJECT_DIR/tests/AuditService.Tests/
#     - dotnet build-server shutdown
#     - dotnet sonarscanner begin /k:"$SONAR_PROJECT_KEY" /v:"$CI_IMAGE_TAG" /d:sonar.host.url="$SONAR_URL" /d:sonar.login="$SONAR_TOKEN" /d:sonar.cs.opencover.reportsPaths="$CI_PROJECT_DIR/tests/AuditService.Tests/coverage.opencover.xml" /d:sonar.coverage.exclusions=‚Äù**Test*.cs
#     - dotnet build ./AuditService P2.sln -c Debug --no-restore
#     - dotnet tool restore -v q
#     - ls -lah $CI_PROJECT_DIR/tests/AuditService.Tests
#     - pwd
#     - dotnet test --no-restore --no-build /p:CollectCoverage=true /p:CoverletOutputFormat=opencover  /p:CoverletOutput=coverage /p:Exclude=[NUnit3.TestAdapter]* ./tests/AuditService.Tests/AuditService.Tests.csproj
#     - ls -lah $CI_PROJECT_DIR/tests/AuditService.Tests
#     - ls -lah $CI_PROJECT_DIR/
#     - echo "$OCPATH"
#     - dotnet sonarscanner end /d:sonar.login="$SONAR_TOKEN"

# ========================================================================================================================
# sonarqube test jobs
# ========================================================================================================================

# api-sq test:
#   extends: .sonartest
#   needs:
#     - apiVersion
#     - api build
#     - migration build
#     - consumer build
#   dependencies:
#     - apiVersion
#     - api build
#     - migration build
#     - consumer build
#   variables:
#     APPNAME: "AuditService.WebApi"
#     TESTDIR: "tests"
#     NUGETSRC: "https://api.nuget.org/v3/index.json"
#     PROJECTKEY: "$SONAR_PROJECT_KEY"
#     SONARURL: "$SONAR_URL"
#     SONARLOGIN: "$SONAR_TOKEN"