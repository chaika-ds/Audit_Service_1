version: '3.4'

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT}
      ZOOKEEPER_TICK_TIME: ${ZOOKEEPER_TICK_TIME}
    networks:
      - ${NETWORKS_NAME}

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: ${KAFKA_BROKER_ID}
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:${ZOOKEEPER_CLIENT_PORT}'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:${KAFKA_PORT},PLAINTEXT_INTERNAL://kafka:${KAFKA_CLUSTERS_BOOTSTRAPSERVERS_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: ${KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR}
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: ${KAFKA_TRANSACTION_STATE_LOG_MIN_ISR}
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: ${KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR}
    networks:
      - ${NETWORKS_NAME}

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - ${KAFKA_UI_PORT}:${KAFKA_UI_PORT}
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_CLUSTERS_0_NAME}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:${KAFKA_CLUSTERS_BOOTSTRAPSERVERS_PORT}
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:${ZOOKEEPER_CLIENT_PORT}
      KAFKA_CLUSTERS_0_JMXPORT: ${KAFKA_CLUSTERS_0_JMXPORT}
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: ${KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME}
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://${KAFKA_CONNECT_REST_ADVERTISED_HOST_NAME}:${KAFKA_CONNECT_PORT}
    networks:
      - ${NETWORKS_NAME}

  kafka-connect:
    container_name: kafka-connect
    image: confluentinc/cp-kafka-connect:6.0.1
    ports:
      - ${KAFKA_CONNECT_PORT}:${KAFKA_CONNECT_PORT}
    depends_on:
      - kafka
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka:${KAFKA_CLUSTERS_BOOTSTRAPSERVERS_PORT}
      CONNECT_GROUP_ID: ${KAFKA_CONNECT_GROUP_ID}
      CONNECT_CONFIG_STORAGE_TOPIC: ${KAFKA_CONNECT_CONFIG_STORAGE_TOPIC}
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: ${KAFKA_CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR}
      CONNECT_OFFSET_STORAGE_TOPIC: ${KAFKA_CONNECT_OFFSET_STORAGE_TOPIC}
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: ${KAFKA_CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR}
      CONNECT_STATUS_STORAGE_TOPIC: ${KAFKA_CONNECT_STATUS_STORAGE_TOPIC}
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: ${KAFKA_CONNECT_STATUS_STORAGE_REPLICATION_FACTOR}
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: ${KAFKA_CONNECT_REST_ADVERTISED_HOST_NAME}
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
    networks:
      - ${NETWORKS_NAME}

  auditservice:
    container_name: auditservice
    depends_on: 
      - kafka
    image: slotegrator/auditservice
    build:
      args:
        - APP_PORT=${APP_PORT}
        - APP_NAME=${APP_NAME}
      context: .
      dockerfile: Dockerfile.development
    ports:
      - ${APP_PORT}:${APP_PORT}
    environment:
      - ASPNETCORE_ENVIRONMENT=${APP_ENV}
    volumes:
      - ~/.vsdbg:/remote_debugger:rw
      - ./config:/app/config
    networks:
      - ${NETWORKS_NAME}

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    ports:
      - ${ELK_PORT}:${ELK_PORT}
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - ${NETWORKS_NAME}

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=${KIBANA_ELK_URL}
    networks:
      - ${NETWORKS_NAME}

  redis:
    container_name: redis
    image: docker.io/bitnami/redis:${REDIS_VERSION}
    environment:
      - ALLOW_EMPTY_PASSWORD=${REDIS_ALLOW_EMPTY_PASSWORD}
      - REDIS_DISABLE_COMMANDS=${REDIS_DISABLE_COMMANDS}
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    networks:
      - ${NETWORKS_NAME}
    volumes:
      - 'redis_data:/bitnami/redis/data'



networks:
  auditservice:
    driver: ${NETWORKS_DRIVER}

volumes:
  redis_data:
    driver: local
  elasticsearch-data: